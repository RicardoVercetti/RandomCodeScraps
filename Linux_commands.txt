Linux commands

systemctl
  [System state management]
  - systemctl reboot                                                  # Restart the machine.
  - systemctl poweroff                                                # Power off the system.
  - systemctl suspend                                                 # Suspend the system to RAM (low power mode).
  - systemctl halt                                                    # Halt the system without powering off.
  - systemctl rescue                                                  # Enter rescue (single-user) mode.
  - systemctl isolate <target>                                        # Switch to a specific system target (e.g., graphical).
  [Service management]
  - systemctl isolate multi-user.target                               # Switch to multi-user (non-graphical) mode.
  - systemctl start <service>                                         # Start a service manually.
  - systemctl stop <service>                                          # Stop a running service.
  - systemctl restart <service>                                       # Restart a service (stop and start again).
  - systemctl reload <service>                                        # Reload configuration without stopping the service (if supported).
  - systemctl status <service>                                        # Show the current status of a service.
  - systemctl enable <service>                                        # Enable the service to start at boot.
  - systemctl disable <service>                                       # Disable the service from starting at boot.
  - systemctl is-active <service>                                     # Check if the service is active (running).
  - systemctl is-enabled <service>                                    # Check if the service is enabled at boot.



chmod



General
 - rm -rf <directory_name>                                                  # remove a directory with all contents(using the -rf option, as it will permanently delete files without any confirmation)
 - mv [options] <source_folder> <destination>                               # move folder
 - mv /path/to/folder /path/to/destination/
 - dpkg -S /usr/bin/nvim                                                    # finding the package name of binary
 - which <cli-command-name>                                                 # find the location in the executable
 - sudo apt purge <package_name>                                            # uninstall and remove the config/residual files too
 - uname -m                                                                 # System's architecture
 - apt-cache policy <package-name>                                          # available versions of package
 - ip addr show
 - df -h																	                                  # check disk usage
 - baobab																	                                  # gnome disk usage analyzer
 - sudo lsof -i :8080														                            # Find the Process Using Port 8080
 - sudo kill -9 <PID>
 - tree																		                                  # show directory stucts in cli
 - tree -L <depth>															# show until that deep of the file structure
 - tree -L 2 --prune -I "node_modules"										# Ignore certain files or directories
 - tree -d -L 2																# only show directories
 - du -sh folder_name														                            # du(Diskusage) -s(total size) -h(human readable)
 - du -h --max-depth=1 folder_name											                    # sizes of all sub dirs inside a folder
 - find folder/to/work -type f -exec git update-index --no-assume-unchanged {} \;			# f → all files, execute the command after -exec, {} → placeholder for found files, \; → end for command



Shell
 - source <filename>                                                        # Reloads the file in question for the shell session(used after editing .bashrc)



Nano (A text editor in command line)
 - nano filename                                                            # Opens a file, creates if doesnt exist
 - ctrl + o                                                                 # for output
 - ctrl + x                                                                 # Exit nano
 - alt + u                                                                  # Undo
 - alt + e                                                                  # redo
 - ctrl + w                                                                 # search for text (ctrl + w again to find next occurance)
 - ctrl + \                                                                 # Find and Replace
 - ctrl + c                                                                 # Show current cursor position and line number
 - ctrl + _                                                                 # Go to a specific line



Java
 - update-alternatives --list java                                          # List outs all the java versions installed
 - update-alternatives --config java                                        # change the default java version(have to be done as a super user)
 - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre                   # For setting java home for the current terminal session
 - source ~/.bashrc															                            # to refresh current session shell script



git commands
  - git log <branch-name>                                                   # list commits of a certain branch
  - git show                                                                # Last commits changes (full details)
  - git show <commit-hash>                                                  # specific commit changes (full details)
  - git show --name-only <commit-hash>                                      # just names of files with changes
  - git show --stat <commit-hash>                                           # names plus line changes stat
  - git log --oneline                                                       # Concise commit details
  - git show <commit-hash> -- <file-path>                                   # certain file from a certain commit (file path should be absolute)
  - git diff                                                                # All file changes
  - git diff <file-path>                                                    # specific file changes
  - git diff --cached                                                       # changes stagged for commit
  - git diff > changes.diff													                        # Redirects the output of git diff to a file named changes.diff - can later be reapplied to your repository to restore those changes.
  - git diff stash@{0}														# See the full diff of a stash
  - git apply changes.diff													                        # Apply the changes from the file changes.diff
  - git stash save "message"
  - git stash push -m "message"
  - git stash -u															# -u is short for --include-untracked
  - git stash -a															# -a is short for --all, which includes untracked and ignored files
  - git stash list
  - git stash show -p stash@{0}												# Show changes in a specific stash, The -p flag (or --patch) shows the detailed changes.
  - git stash clear                                                         # remove all stash
  - git stash drop stash@{n}                                                # remove a specific stash
  - git stash show -p --include-untracked stash@{0}							# Show a stash in detail (including untracked files if any)
  - git cherry-pick <commit-hash>                                           # Add a certain commit from another branch to this branch
  - git cherry-pick --continue                                              # complete the current cherry-pick
  - git cherry-pick <start-commit>^..<end-commit>                           # Cherry-Pick Multiple Commits
  - git cherry-pick abc1234 def5678 ghi91011
  - git branch                                                              # all branches that exist locally
  - git branch -m main														                          # rename branch to main
  - git branch -r                                                           # all branches at remote repo
  - git branch -a                                                           # at both remote and local
  - git branch --format="%(refname:short)"                                  # Compact View
  - git clone --branch <branch-name> --single-branch <repository-url>       # specifically clone one branch from a remote repo
  - git rm -r --cached target/												                      # This ensures that target folder is ignored going forward, and any previously tracked files in target are removed from the repository.
  - git reset --hard														                            # Discard all changes and reset the working directory
  - git reset --soft HEAD~1													                        # Undo Last Commit but Keep Changes (Soft Reset)
  - git restore --staged .													                        # unstage all files
  - git rebase main															# Updates your branch to match the latest state of <target-branch>
  - git clean -f															                              # removed untracked files only
  - git clean -fd															                              # files n directories
  - git clean -fx															                              # remove ignorted files too
  - git clean -fdx															                            # ignored and untracked files and directories
  - git clean -n															                              # (dry run)preview before deleting
  - git clone --branch <branch-name> --single-branch <repo-url>
  - git config --get user.name
  - git config --get user.email
  - git remote -v															                              # show remote repo links
  - git remote set-url origin git@github.com:RicardoVercetti/Des3FromScratch.git						# change to ssh URL, HTTP looks t
  - ssh -T git@github.com													                          # check ssh conenction w/ github
  - git branch --contains <commit-hash>										                  # check if a specific commit exists in any branch of a Git repository
  - git fetch origin <branch-name>											                    # fetch only one branch changes
  - git push -u origin main													                        # -u(--set-upstream)
  - git push -f																# force push
  - git push --force-with-lease												# This checks if the remote branch has new commits before forcing the push. It prevents accidental overwrites if someone else has pushed changes
  - git rev-list --left-right --count origin/main...main					# Compare Local and Remote Directly
  - git log main..origin/main --oneline										# if remote has new commits comparing local
  - git log origin/main..main --oneline 			# local has no new compaing remote 
  - git pull origin <current-branch>										# pull only one branch changes
  - git pull --rebase														# puts the local commits on top of pulled remote commits
  - git rm -r --cached the/folder											# To remove the folder/file from tracking while keeping them locally
  - git update-index --assume-unchanged file/location						# pause tracking changes, ignore anymore changes without altering the remote file
  - git ls-files -v															# lists all tracked files along with their status.
  - git ls-files -v | grep '^[[:lower:]]'									# find all tracked files with lower 'h' - assume unchanged




sqlcmd
 - sqlcmd -?                                                            # to check if its installed
 - sqlcmd -S <server_name> -U <username> -P <password>
 - sqlcmd -S <server> -U <user> -P <pass> -d <database> -i <file.sql>   # For query with file

MVN
 - mvn compile
 - mvn test
 - mvn package
 - mvn clean
 - mvn validate

Firewall
 - sudo ufw status
 - sudo ufw allow 8089/tcp


storage analyzer
 - ncdu /

Gradle
 - gradle --version
 - ./gradlew dependencies													# 
 - ./gradlew bootRun														# run the project
 - ./gradlew build --refresh-dependencies									# 
 - gradle --stop  															# Stop any running Gradle daemons
 - gradle clean
 - rm -rf ~/.gradle/caches/													# remove cache files
 
Cargo
 - cargo new project_name													# create new rust project with cargo build tool
 - cargo build
 - cargo run																# run the project
 
npm
 - npm install -g typescript												# globally install tsc
 - npm install -g ts-node													# globally install the one-go compiler and runner
 - ts-node filename.ts														# to compile and run .ts files
 - tsc --init																# the tsconfig.json is required for running even a random file
 - npm list									# list all the installed packages
 - npm list -g									# global packages
 - npm list --depth=0								# only direct dependencies

nvim
 - shift + esc                                        # mode change to normal
 - :w                                                 # write the changes
 - :q                                                 # quit
 - :q!                                                # exit without saving
 - :wq                                                # save and quit

