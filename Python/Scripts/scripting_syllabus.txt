-- Python Scripting Syllabus --

---

âœ… 1. Core Python (Foundational Concepts)

Before jumping into scripting, get comfortable with:

Variables & Data Types

Operators (arithmetic, comparison, logical, bitwise)

Control Flow (if, else, elif)

Loops (for, while, break, continue)

Functions (default args, *args, **kwargs)

Error Handling (try, except, finally)

File I/O (open(), read/write modes)

Modules and Imports

List, Dict, Set, Tuple (and comprehensions)

String Manipulation (important for parsing)


> ðŸ“¦ Built-ins to explore: open, os, sys, enumerate, range, zip, map, filter, lambda, type, isinstance, dir, help, input, print, len, str, int, float, bool




---

âœ… 2. OS-Level Scripting

Automate system tasks and process control.

Topics:

Working with the filesystem

Running shell commands

Reading environment variables

Argument parsing

Scheduling scripts (with cron or task scheduler)


Built-in & External Packages:

os â€“ working with files, dirs, environment

shutil â€“ high-level file operations

sys â€“ system-specific params and functions

subprocess â€“ run shell commands (safer than os.system)

argparse â€“ parsing CLI arguments

pathlib â€“ modern path handling

glob â€“ file matching using wildcards



---

âœ… 3. Text and File Processing

For log analysis, config parsing, data extraction, etc.

Topics:

Reading/writing text, CSV, JSON, XML

String formatting and regular expressions

Log parsing and transformation


Packages:

re â€“ regular expressions

csv â€“ CSV file handling

json â€“ JSON parsing and serialization

xml.etree.ElementTree â€“ basic XML parsing

configparser â€“ INI-style config files

logging â€“ robust logging instead of print()



---

âœ… 4. Networking and APIs

To interact with web services or network devices.

Topics:

Making HTTP requests

Downloading files

Automating web APIs

Working with sockets (basic level)


Packages:

requests â€“ HTTP requests (must-learn)

http.server â€“ create a simple local server

urllib â€“ built-in alternative to requests

socket â€“ for basic socket programming (optional)



---

âœ… 5. Automation and Task Scheduling

For daily jobs, repetitive tasks, browser automation.

Topics:

Scheduling tasks

Automating web interaction

Automating spreadsheets or PDFs


Packages:

schedule â€“ lightweight job scheduling

time, datetime â€“ timing and delays

pyautogui â€“ GUI automation

selenium â€“ browser automation

pandas â€“ data manipulation (for reports, CSVs, Excel)

openpyxl or xlsxwriter â€“ Excel automation

PyPDF2 or pdfplumber â€“ PDF reading/editing



---

âœ… 6. System Monitoring & DevOps Scripting

Monitor system metrics, write deployment scripts.

Topics:

Process monitoring

Disk/CPU/memory info

Log collection

Writing deployment/setup scripts


Packages:

psutil â€“ process and system monitoring

platform â€“ system information

getpass â€“ secure password input

dotenv â€“ load environment vars from .env

fabric or paramiko â€“ remote shell commands via SSH



---

âœ… 7. Concurrent Scripting

For writing fast, efficient scripts.

Topics:

Threading vs Multiprocessing

Async programming (basic level)


Packages:

threading â€“ multithreading

multiprocessing â€“ process-based parallelism

concurrent.futures â€“ high-level interface

asyncio â€“ async event loop (advanced use)



---

âœ… 8. Testing and Debugging Scripts

Write reliable and maintainable scripts.

Topics:

Unit testing

Debugging techniques

Assertions


Packages:

unittest â€“ built-in testing framework

pytest â€“ modern and flexible test framework

pdb â€“ Python debugger

logging â€“ replace print() in production scripts



---

âœ… 9. Packaging and Distributing Scripts

Make your scripts reusable or installable.

Topics:

Creating CLI tools

Packaging with setup.py

Creating .pyz or standalone binaries


Packages:

argparse, click, or typer â€“ CLI apps

setuptools â€“ for packaging

pyinstaller or shiv â€“ for creating executables



---

âœ… 10. Useful External Tools for Script Development

pipx â€“ run Python apps in isolated environments

virtualenv or venv â€“ create isolated environments

black, flake8, isort â€“ code formatting and linting



---

ðŸ“š Suggested Practice Projects

File renamer script

Backup automation script

PDF/Excel report generator

REST API data fetcher & processor

CLI tool to manage TODOs or notes

Web scraper for a site

GitHub automation (create issues, pull data)
